// ==============================
//       CUSTOM LOGGER LOOTY
// ==============================

// üîß Chargement de la configuration
const config = require('./config');

// üïí Fonction qui retourne la date/heure actuelle format√©e en FR (Europe/Paris)
const now = () => new Date().toLocaleString("fr-FR", {
  timeZone: "Europe/Paris"
});

// üåç Environnement courant d√©fini dans la config (ex: development, production)
const currentEnv = config.APP_ENVIRONMENTS;

// üéöÔ∏è D√©finition des niveaux de logs autoris√©s par environnement
// Chaque environnement a ses propres niveaux affichables
const LOG_LEVELS = {
  debug:       ["debug", "info", "success", "maj", "timer", "warn", "error"],
  development: ["info", "success", "maj", "timer", "warn", "error"],
  production:  ["success", "warn", "error"]
};

/**
 * ‚úÖ V√©rifie si un niveau de log donn√© est autoris√© dans l'environnement actuel
 * @param {string} level - Niveau du log (debug, info, success, etc.)
 * @returns {boolean} - true si on doit logger, sinon false
 */
function shouldLog(level) {
  return LOG_LEVELS[currentEnv]?.includes(level);
}

/**
 * üí¨ Fonction g√©n√©rique pour afficher les logs dans la console
 * ‚û§ Color√©e, emoji, timestamp√©e et conditionn√©e par l'environnement
 *
 * @param {"log" | "warn" | "error"} type - M√©thode de console √† utiliser
 * @param {string} emoji - Ic√¥ne du type de log (visuel rapide)
 * @param {string} color - Code couleur depuis config
 * @param {string} levelName - Niveau logique du log (pour filtrage env)
 * @param {string} message - Message principal
 * @param {string} [message2] - Message secondaire ou compl√©ment
 */
function log(type, emoji, color, levelName, message, message2 = "") {
  if (!shouldLog(levelName)) return;

  const format = typeof message2 === "object" ? JSON.stringify(message2, null, 2) : message2;
  const timestamp = `${config.WHITE}${now()} : ${emoji} ${color}${message}${config.WHITE} ${format}`;
  console[type](timestamp);
}

// ==============================
//       EXPORT DES M√âTHODES
// ==============================

module.exports = {
  /**
   * üêû Debug : visible seulement en env "debug"
   */
  debug(message, message2 = "") {
    log("log", "üêû", config.BLUE, "debug", message, message2);
  },

  /**
   * ‚ÑπÔ∏è  Info : pour informations g√©n√©rales
   */
  info(message, message2 = "") {
    log("log", "‚ÑπÔ∏è ", config.BLUE, "info", message, message2);
  },

  /**
   * ‚úÖ Success : pour actions r√©ussies (sauvegarde, init, etc.)
   */
  success(message, message2 = "") {
    log("log", "‚úÖ", config.GREEN, "success", message, message2);
  },

  /**
   * üîÑ MAJ : pour signaler une mise √† jour ou un changement
   */
  maj(message, message2 = "") {
    log("log", "üîÑ", config.GREEN, "maj", message, message2);
  },

  /**
   * ‚åõ Timer : utile pour afficher des mesures de temps ou de latence
   */
  timer(message, message2 = "") {
    log("log", "‚åõ", config.BLUE, "timer", message, message2);
  },

  /**
   * ‚ö†Ô∏è  Avertissement : pour situations non bloquantes mais √† surveiller
   */
  warn(message, message2 = "") {
    log("warn", "‚ö†Ô∏è", config.RED, "warn", message, message2);
  },

  /**
   * ‚ùå Erreur : pour erreurs critiques, affiche aussi l'objet d'erreur
   */
  error(message, err) {
    if (!shouldLog("error")) return;

    const timestamp = `${config.WHITE}${now()} : ‚ùå ${config.RED}${message}${config.WHITE}`;
    console.error(timestamp, err); // err peut √™tre un objet, string ou stack
  }
};
